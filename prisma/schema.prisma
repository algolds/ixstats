generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Country {
  id                          String                @id @default(cuid())
  name                        String                @unique
  continent                   String?
  region                      String?
  governmentType              String?
  religion                    String?
  leader                      String?
  flag                        String?
  coatOfArms                  String?
  landArea                    Float?
  areaSqMi                    Float?
  baselinePopulation          Float
  baselineGdpPerCapita        Float
  maxGdpGrowthRate            Float
  adjustedGdpGrowth           Float
  populationGrowthRate        Float
  currentPopulation           Float
  currentGdpPerCapita         Float
  currentTotalGdp             Float
  populationDensity           Float?
  gdpDensity                  Float?
  economicTier                String
  populationTier              String
  projected2040Population     Float                 @default(0)
  projected2040Gdp            Float                 @default(0)
  projected2040GdpPerCapita   Float                 @default(0)
  actualGdpGrowth             Float                 @default(0)
  nominalGDP                  Float?
  realGDPGrowthRate           Float?
  inflationRate               Float?
  currencyExchangeRate        Float?
  laborForceParticipationRate Float?
  employmentRate              Float?
  unemploymentRate            Float?
  totalWorkforce              Float?
  averageWorkweekHours        Float?
  minimumWage                 Float?
  averageAnnualIncome         Float?
  taxRevenueGDPPercent        Float?
  governmentRevenueTotal      Float?
  taxRevenuePerCapita         Float?
  governmentBudgetGDPPercent  Float?
  budgetDeficitSurplus        Float?
  internalDebtGDPPercent      Float?
  externalDebtGDPPercent      Float?
  totalDebtGDPRatio           Float?
  debtPerCapita               Float?
  interestRates               Float?
  debtServiceCosts            Float?
  povertyRate                 Float?
  incomeInequalityGini        Float?
  socialMobilityIndex         Float?
  totalGovernmentSpending     Float?
  spendingGDPPercent          Float?
  spendingPerCapita           Float?
  lifeExpectancy              Float?
  urbanPopulationPercent      Float?
  ruralPopulationPercent      Float?
  literacyRate                Float?
  localGrowthFactor           Float                 @default(1.0)
  lastCalculated              DateTime              @default(now())
  baselineDate                DateTime              @default(now())
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  demographics                Demographics?
  dmInputs                    DmInputs[]
  economicModel               EconomicModel?
  economicProfile             EconomicProfile?
  fiscalSystem                FiscalSystem?
  governmentBudget            GovernmentBudget?
  historicalData              HistoricalDataPoint[]
  incomeDistribution          IncomeDistribution?
  laborMarket                 LaborMarket?
  user                        User?
  thinkpagesAccounts          ThinkpagesAccount[]
  moodMetrics                 CountryMoodMetric[]
  archetypeMatches            CountryArchetypeMatch[] @relation("CountryArchetypes")

  @@index([name])
  @@index([economicTier])
  @@index([populationTier])
  @@index([continent])
  @@index([region])
}

model EconomicProfile {
  id                  String   @id @default(cuid())
  countryId           String   @unique
  gdpGrowthVolatility Float?
  economicComplexity  Float?
  innovationIndex     Float?
  competitivenessRank Int?
  easeOfDoingBusiness Int?
  corruptionIndex     Float?
  sectorBreakdown     String?
  exportsGDPPercent   Float?
  importsGDPPercent   Float?
  tradeBalance        Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  country             Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model LaborMarket {
  id                      String   @id @default(cuid())
  countryId               String   @unique
  employmentBySector      String?
  youthUnemploymentRate   Float?
  femaleParticipationRate Float?
  informalEmploymentRate  Float?
  medianWage              Float?
  wageGrowthRate          Float?
  wageBySector            String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  country                 Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model FiscalSystem {
  id                       String   @id @default(cuid())
  countryId                String   @unique
  personalIncomeTaxRates   String?
  corporateTaxRates        String?
  salesTaxRate             Float?
  propertyTaxRate          Float?
  payrollTaxRate           Float?
  exciseTaxRates           String?
  wealthTaxRate            Float?
  spendingByCategory       String?
  fiscalBalanceGDPPercent  Float?
  primaryBalanceGDPPercent Float?
  taxEfficiency            Float?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  country                  Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model IncomeDistribution {
  id                        String   @id @default(cuid())
  countryId                 String   @unique
  economicClasses           String?
  top10PercentWealth        Float?
  bottom50PercentWealth     Float?
  middleClassPercent        Float?
  intergenerationalMobility Float?
  educationMobility         Float?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  country                   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model GovernmentBudget {
  id                    String   @id @default(cuid())
  countryId             String   @unique
  spendingCategories    String?
  spendingEfficiency    Float?
  publicInvestmentRate  Float?
  socialSpendingPercent Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  country               Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model Demographics {
  id                         String   @id @default(cuid())
  countryId                  String   @unique
  ageDistribution            String?
  regions                    String?
  educationLevels            String?
  citizenshipStatuses        String?
  birthRate                  Float?
  deathRate                  Float?
  migrationRate              Float?
  dependencyRatio            Float?
  medianAge                  Float?
  populationGrowthProjection Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  country                    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model HistoricalDataPoint {
  id                   String   @id @default(cuid())
  countryId            String
  ixTimeTimestamp      DateTime
  population           Float
  gdpPerCapita         Float
  totalGdp             Float
  populationGrowthRate Float
  gdpGrowthRate        Float
  landArea             Float?
  populationDensity    Float?
  gdpDensity           Float?
  createdAt            DateTime @default(now())
  country              Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([ixTimeTimestamp])
}

model DmInputs {
  id              String   @id @default(cuid())
  countryId       String?
  ixTimeTimestamp DateTime
  inputType       String
  value           Float
  description     String?
  duration        Int?
  isActive        Boolean  @default(true)
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  country         Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([ixTimeTimestamp])
  @@index([isActive])
  @@index([inputType])
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model CalculationLog {
  id                 String   @id @default(cuid())
  timestamp          DateTime @default(now())
  ixTimeTimestamp    DateTime
  countriesUpdated   Int
  executionTimeMs    Int
  globalGrowthFactor Float
  notes              String?
  createdAt          DateTime @default(now())

  @@index([timestamp])
  @@index([ixTimeTimestamp])
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  countryId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     Country? @relation(fields: [countryId], references: [id])
  archetypeSelections UserArchetypeSelection[] @relation("UserArchetypes")

  @@index([clerkUserId])
  @@index([countryId])
}

model EconomicModel {
  id                   String           @id @default(cuid())
  countryId            String           @unique
  baseYear             Int
  projectionYears      Int
  gdpGrowthRate        Float
  inflationRate        Float
  unemploymentRate     Float
  interestRate         Float
  exchangeRate         Float
  populationGrowthRate Float
  investmentRate       Float
  fiscalBalance        Float
  tradeBalance         Float
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  country              Country          @relation(fields: [countryId], references: [id], onDelete: Cascade)
  policyEffects        PolicyEffect[]
  sectoralOutputs      SectoralOutput[]
}

model SectoralOutput {
  id              String        @id @default(cuid())
  economicModelId String
  year            Int
  agriculture     Float
  industry        Float
  services        Float
  government      Float
  totalGDP        Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  economicModel   EconomicModel @relation(fields: [economicModelId], references: [id], onDelete: Cascade)
}

model PolicyEffect {
  id                         String        @id @default(cuid())
  economicModelId            String
  name                       String
  description                String
  gdpEffectPercentage        Float
  inflationEffectPercentage  Float
  employmentEffectPercentage Float
  yearImplemented            Int
  durationYears              Int
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  economicModel              EconomicModel @relation(fields: [economicModelId], references: [id], onDelete: Cascade)
}

model IntelligenceItem {
  id                String   @id @default(cuid())
  title             String
  content           String
  category          String
  priority          String
  source            String
  timestamp         DateTime
  region            String?
  affectedCountries String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CrisisEvent {
  id                String   @id @default(cuid())
  type              String
  title             String
  severity          String
  affectedCountries String?
  casualties        Int?
  economicImpact    Float?
  responseStatus    String?
  timestamp         DateTime
  description       String?
  location          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model DiplomaticRelation {
  id                 String   @id @default(cuid())
  country1           String
  country2           String
  relationship       String
  strength           Int
  treaties           String?
  lastContact        DateTime
  status             String
  diplomaticChannels String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Treaty {
  id             String   @id @default(cuid())
  name           String
  parties        String?
  type           String
  status         String
  signedDate     DateTime
  expiryDate     DateTime
  description    String?
  complianceRate Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model EconomicIndicator {
  id                 String   @id @default(cuid())
  globalGDP          Float
  globalGrowth       Float
  inflationRate      Float
  unemploymentRate   Float
  tradeVolume        Float
  currencyVolatility Float
  timestamp          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String?  // Clerk userId (nullable for country-wide notifications)
  countryId   String?  // Country id for country-wide notifications
  title       String
  description String?
  read        Boolean  @default(false)
  href        String?
  type        String?  // e.g., 'crisis', 'economic', 'diplomatic', etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPreferences {
  id                   String  @id @default(cuid())
  userId               String  @unique // Clerk user ID
  emailNotifications   Boolean @default(true)
  pushNotifications    Boolean @default(true)
  economicAlerts       Boolean @default(true)
  crisisAlerts         Boolean @default(true)
  diplomaticAlerts     Boolean @default(false)
  systemAlerts         Boolean @default(true)
  notificationLevel    String  @default("medium") // low, medium, high, critical
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([userId])
}

// Thinkpages Social Platform Models
model ThinkpagesAccount {
  id                  String   @id @default(cuid())
  countryId           String
  accountType         String   // 'government' | 'media' | 'citizen'
  username            String   @unique // @handle
  displayName         String
  firstName           String
  lastName            String
  bio                 String?
  profileImageUrl     String?
  verified            Boolean  @default(false)
  followerCount       Int      @default(0)
  followingCount      Int      @default(0)
  postCount           Int      @default(0)
  postingFrequency    String   @default("moderate") // 'active' | 'moderate' | 'low'
  politicalLean       String   @default("center") // 'left' | 'center' | 'right'
  personality         String   @default("serious") // 'serious' | 'casual' | 'satirical'
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  country             Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  posts               ThinkpagesPost[]
  reactions           PostReaction[]
  mentions            PostMention[]
  
  // ThinkTanks (Groups) Relations
  createdThinktanks   ThinktankGroup[]  @relation("ThinktankCreator")
  thinktankMemberships ThinktankMember[] @relation("ThinktankMemberships")
  thinktankMessages   ThinktankMessage[] @relation("ThinktankMessages")
  sentInvites         ThinktankInvite[]  @relation("SentInvites")
  createdDocs         CollaborativeDoc[] @relation("CreatedDocs")
  editedDocs          CollaborativeDoc[] @relation("EditedDocs")
  
  // ThinkShare (Messaging) Relations
  conversationParticipants ConversationParticipant[] @relation("ConversationParticipants")
  thinkshareMessages  ThinkshareMessage[] @relation("ThinkshareMessages")
  messageReadReceipts MessageReadReceipt[] @relation("MessageReadReceipts")
  
  // Presence Relations
  presence            AccountPresence? @relation("AccountPresence")
  
  @@index([countryId])
  @@index([accountType])
  @@index([username])
  @@index([verified])
}

model ThinkpagesPost {
  id                String   @id @default(cuid())
  accountId         String
  content           String   // 280 character limit enforced in frontend
  hashtags          String?  // JSON array of hashtag strings
  postType          String   @default("original") // 'original' | 'repost' | 'reply'
  parentPostId      String?  // For replies
  repostOfId        String?  // For reposts
  likeCount         Int      @default(0)
  repostCount       Int      @default(0)
  replyCount        Int      @default(0)
  impressions       Int      @default(0)
  reactionCounts    String?  // JSON object of reaction counts
  trending          Boolean  @default(false)
  pinned            Boolean  @default(false)
  visibility        String   @default("public") // 'public' | 'followers' | 'mentioned'
  ixTimeTimestamp   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  account           ThinkpagesAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  parentPost        ThinkpagesPost?   @relation("PostReplies", fields: [parentPostId], references: [id])
  replies           ThinkpagesPost[]  @relation("PostReplies")
  repostOf          ThinkpagesPost?   @relation("PostReposts", fields: [repostOfId], references: [id])
  reposts           ThinkpagesPost[]  @relation("PostReposts")
  reactions         PostReaction[]
  mentions          PostMention[]
  mediaAttachments  MediaAttachment[]
  
  @@index([accountId])
  @@index([ixTimeTimestamp])
  @@index([trending])
  @@index([visibility])
  @@index([postType])
  @@index([parentPostId])
}

model PostReaction {
  id           String   @id @default(cuid())
  postId       String
  accountId    String
  reactionType String   // 'like' | 'laugh' | 'angry' | 'sad' | 'fire' | 'thumbsup' | 'thumbsdown'
  timestamp    DateTime @default(now())
  
  // Relations
  post         ThinkpagesPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  account      ThinkpagesAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([postId, accountId]) // One reaction per account per post
  @@index([postId])
  @@index([accountId])
  @@index([reactionType])
}

model PostMention {
  id              String   @id @default(cuid())
  postId          String
  mentionedAccountId String
  position        Int      // Character position in the post content
  
  // Relations
  post            ThinkpagesPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  mentionedAccount ThinkpagesAccount @relation(fields: [mentionedAccountId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([mentionedAccountId])
}

model MediaAttachment {
  id        String   @id @default(cuid())
  postId    String
  type      String   // 'image' | 'video' | 'document'
  url       String
  filename  String?
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())
  
  // Relations
  post      ThinkpagesPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([type])
}

model TrendingTopic {
  id            String   @id @default(cuid())
  hashtag       String   @unique
  postCount     Int      @default(0)
  engagement    Int      @default(0) // Combined likes, reposts, replies
  region        String?  // Optional geographic filter
  peakTimestamp DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([hashtag])
  @@index([postCount])
  @@index([engagement])
  @@index([isActive])
}

model CountryMoodMetric {
  id            String   @id @default(cuid())
  countryId     String
  timestamp     DateTime // Daily or weekly timestamp
  sentimentScore Float    // -1.0 to 1.0
  postCount     Int      @default(0)
  
  country       Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, timestamp])
  @@index([countryId])
  @@index([timestamp])
}

// ThinkTanks (Groups) Models
model ThinktankGroup {
  id                String   @id @default(cuid())
  name              String
  description       String?
  avatar            String?
  type              String   @default("public") // 'public' | 'private' | 'invite_only'
  category          String?  // 'Environment' | 'Technology' | 'Business' | etc.
  tags              String?  // JSON array of tag strings
  memberCount       Int      @default(0)
  createdBy         String   // accountId of creator
  isActive          Boolean  @default(true)
  settings          String?  // JSON object for group settings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  creator           ThinkpagesAccount @relation("ThinktankCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  members           ThinktankMember[]
  messages          ThinktankMessage[]
  invites           ThinktankInvite[]
  collaborativeDocs CollaborativeDoc[]
  
  @@index([type])
  @@index([category])
  @@index([createdBy])
  @@index([isActive])
}

model ThinktankMember {
  id          String   @id @default(cuid())
  groupId     String
  accountId   String
  role        String   @default("member") // 'owner' | 'admin' | 'moderator' | 'member'
  joinedAt    DateTime @default(now())
  isActive    Boolean  @default(true)
  permissions String?  // JSON object for member permissions
  
  // Relations
  group       ThinktankGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  account     ThinkpagesAccount @relation("ThinktankMemberships", fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, accountId])
  @@index([groupId])
  @@index([accountId])
  @@index([role])
}

model ThinktankMessage {
  id              String   @id @default(cuid())
  groupId         String
  accountId       String
  content         String   // Rich text content from echo-editor
  messageType     String   @default("text") // 'text' | 'image' | 'file' | 'system'
  replyToId       String?  // For threaded conversations
  editedAt        DateTime?
  deletedAt       DateTime?
  reactions       String?  // JSON object of reaction counts
  mentions        String?  // JSON array of mentioned account IDs
  attachments     String?  // JSON array of attachment objects
  ixTimeTimestamp DateTime @default(now())
  
  // Relations
  group           ThinktankGroup     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  account         ThinkpagesAccount  @relation("ThinktankMessages", fields: [accountId], references: [id], onDelete: Cascade)
  replyTo         ThinktankMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies         ThinktankMessage[] @relation("MessageReplies")
  readReceipts    MessageReadReceipt[]
  
  @@index([groupId])
  @@index([accountId])
  @@index([ixTimeTimestamp])
  @@index([messageType])
}

model ThinktankInvite {
  id          String   @id @default(cuid())
  groupId     String
  invitedBy   String   // accountId
  invitedUser String?  // username or email
  inviteCode  String?  // For invite links
  expiresAt   DateTime?
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  group       ThinktankGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter     ThinkpagesAccount @relation("SentInvites", fields: [invitedBy], references: [id], onDelete: Cascade)
  
  @@index([groupId])
  @@index([invitedBy])
  @@index([inviteCode])
}

model CollaborativeDoc {
  id          String   @id @default(cuid())
  groupId     String
  title       String
  content     String?  // Rich text content for lore writing/planning
  version     Int      @default(1)
  createdBy   String   // accountId
  lastEditBy  String?  // accountId
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  group       ThinktankGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator     ThinkpagesAccount @relation("CreatedDocs", fields: [createdBy], references: [id], onDelete: Cascade)
  lastEditor  ThinkpagesAccount? @relation("EditedDocs", fields: [lastEditBy], references: [id])
  
  @@index([groupId])
  @@index([createdBy])
  @@index([isPublic])
}

// ThinkShare (Private Messaging) Models
model ThinkshareConversation {
  id           String   @id @default(cuid())
  type         String   @default("direct") // 'direct' | 'group'
  name         String?  // For group conversations
  avatar       String?  // For group conversations
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  participants ConversationParticipant[]
  messages     ThinkshareMessage[]
  
  @@index([type])
  @@index([lastActivity])
  @@index([isActive])
}

model ConversationParticipant {
  id              String   @id @default(cuid())
  conversationId  String
  accountId       String
  joinedAt        DateTime @default(now())
  leftAt          DateTime?
  isActive        Boolean  @default(true)
  role            String   @default("participant") // 'admin' | 'participant'
  lastReadAt      DateTime @default(now())
  notificationSettings String? // JSON object for notification preferences
  
  // Relations
  conversation    ThinkshareConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  account         ThinkpagesAccount      @relation("ConversationParticipants", fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, accountId])
  @@index([conversationId])
  @@index([accountId])
}

model ThinkshareMessage {
  id              String   @id @default(cuid())
  conversationId  String
  accountId       String
  content         String   // Rich text content from echo-editor
  messageType     String   @default("text") // 'text' | 'image' | 'file' | 'system'
  replyToId       String?  // For threaded conversations
  editedAt        DateTime?
  deletedAt       DateTime?
  reactions       String?  // JSON object of reaction counts
  mentions        String?  // JSON array of mentioned account IDs
  attachments     String?  // JSON array of attachment objects
  isSystem        Boolean  @default(false)
  ixTimeTimestamp DateTime @default(now())
  
  // Relations
  conversation    ThinkshareConversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  account         ThinkpagesAccount       @relation("ThinkshareMessages", fields: [accountId], references: [id], onDelete: Cascade)
  replyTo         ThinkshareMessage?      @relation("ThinkshareReplies", fields: [replyToId], references: [id])
  replies         ThinkshareMessage[]     @relation("ThinkshareReplies")
  readReceipts    MessageReadReceipt[]
  
  @@index([conversationId])
  @@index([accountId])
  @@index([ixTimeTimestamp])
  @@index([messageType])
}

model MessageReadReceipt {
  id              String   @id @default(cuid())
  messageId       String
  accountId       String
  readAt          DateTime @default(now())
  messageType     String   // 'thinktank' | 'thinkshare'
  
  // Relations for polymorphic association
  thinktankMessage  ThinktankMessage?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  thinkshareMessage ThinkshareMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  account           ThinkpagesAccount  @relation("MessageReadReceipts", fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, accountId])
  @@index([messageId])
  @@index([accountId])
  @@index([messageType])
}

// Online Status and Presence
model AccountPresence {
  id          String   @id @default(cuid())
  accountId   String   @unique
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  status      String   @default("available") // 'available' | 'busy' | 'away' | 'invisible'
  customStatus String?
  updatedAt   DateTime @updatedAt
  
  // Relations
  account     ThinkpagesAccount @relation("AccountPresence", fields: [accountId], references: [id], onDelete: Cascade)
  
  @@index([isOnline])
  @@index([lastSeen])
}

// Enhanced Archetype System
model ArchetypeCategory {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String
  color         String
  maxSelectable Int         @default(2)
  priority      Int         @default(0)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  archetypes    Archetype[]
  
  @@index([priority])
  @@index([isActive])
}

model Archetype {
  id           String            @id @default(cuid())
  name         String            @unique
  description  String
  categoryId   String
  iconName     String
  color        String
  gradient     String
  priority     Int               @default(0)
  isSelectable Boolean           @default(true)
  isActive     Boolean           @default(true)
  tags         String[]          // JSON array of tags
  filterRules  String            // JSON object with filter rules
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // Relations
  category     ArchetypeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userSelections UserArchetypeSelection[]
  countryMatches CountryArchetypeMatch[]
  
  @@index([categoryId])
  @@index([priority])
  @@index([isSelectable])
  @@index([isActive])
}

model UserArchetypeSelection {
  id          String    @id @default(cuid())
  userId      String
  archetypeId String
  selectedAt  DateTime  @default(now())
  
  // Relations
  user        User      @relation("UserArchetypes", fields: [userId], references: [id], onDelete: Cascade)
  archetype   Archetype @relation(fields: [archetypeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, archetypeId])
  @@index([userId])
  @@index([archetypeId])
}

model CountryArchetypeMatch {
  id          String    @id @default(cuid())
  countryId   String
  archetypeId String
  matchScore  Float     @default(1.0) // 0.0 to 1.0 confidence score
  lastChecked DateTime  @default(now())
  
  // Relations
  country     Country   @relation("CountryArchetypes", fields: [countryId], references: [id], onDelete: Cascade)
  archetype   Archetype @relation(fields: [archetypeId], references: [id], onDelete: Cascade)
  
  @@unique([countryId, archetypeId])
  @@index([countryId])
  @@index([archetypeId])
  @@index([matchScore])
}
