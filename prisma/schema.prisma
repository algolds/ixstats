generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Country {
  id                          String                @id @default(cuid())
  name                        String                @unique
  continent                   String?
  region                      String?
  governmentType              String?
  religion                    String?
  leader                      String?
  landArea                    Float?
  areaSqMi                    Float?
  baselinePopulation          Float
  baselineGdpPerCapita        Float
  maxGdpGrowthRate            Float
  adjustedGdpGrowth           Float
  populationGrowthRate        Float
  currentPopulation           Float
  currentGdpPerCapita         Float
  currentTotalGdp             Float
  populationDensity           Float?
  gdpDensity                  Float?
  economicTier                String
  populationTier              String
  projected2040Population     Float                 @default(0)
  projected2040Gdp            Float                 @default(0)
  projected2040GdpPerCapita   Float                 @default(0)
  actualGdpGrowth             Float                 @default(0)
  nominalGDP                  Float?
  realGDPGrowthRate           Float?
  inflationRate               Float?
  currencyExchangeRate        Float?
  laborForceParticipationRate Float?
  employmentRate              Float?
  unemploymentRate            Float?
  totalWorkforce              Float?
  averageWorkweekHours        Float?
  minimumWage                 Float?
  averageAnnualIncome         Float?
  taxRevenueGDPPercent        Float?
  governmentRevenueTotal      Float?
  taxRevenuePerCapita         Float?
  governmentBudgetGDPPercent  Float?
  budgetDeficitSurplus        Float?
  internalDebtGDPPercent      Float?
  externalDebtGDPPercent      Float?
  totalDebtGDPRatio           Float?
  debtPerCapita               Float?
  interestRates               Float?
  debtServiceCosts            Float?
  povertyRate                 Float?
  incomeInequalityGini        Float?
  socialMobilityIndex         Float?
  totalGovernmentSpending     Float?
  spendingGDPPercent          Float?
  spendingPerCapita           Float?
  lifeExpectancy              Float?
  urbanPopulationPercent      Float?
  ruralPopulationPercent      Float?
  literacyRate                Float?
  localGrowthFactor           Float                 @default(1.0)
  lastCalculated              DateTime              @default(now())
  baselineDate                DateTime              @default(now())
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  demographics                Demographics?
  dmInputs                    DmInputs[]
  economicModel               EconomicModel?
  economicProfile             EconomicProfile?
  fiscalSystem                FiscalSystem?
  governmentBudget            GovernmentBudget?
  historicalData              HistoricalDataPoint[]
  incomeDistribution          IncomeDistribution?
  laborMarket                 LaborMarket?
  user                        User?

  @@index([name])
  @@index([economicTier])
  @@index([populationTier])
  @@index([continent])
  @@index([region])
}

model EconomicProfile {
  id                  String   @id @default(cuid())
  countryId           String   @unique
  gdpGrowthVolatility Float?
  economicComplexity  Float?
  innovationIndex     Float?
  competitivenessRank Int?
  easeOfDoingBusiness Int?
  corruptionIndex     Float?
  sectorBreakdown     String?
  exportsGDPPercent   Float?
  importsGDPPercent   Float?
  tradeBalance        Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  country             Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model LaborMarket {
  id                      String   @id @default(cuid())
  countryId               String   @unique
  employmentBySector      String?
  youthUnemploymentRate   Float?
  femaleParticipationRate Float?
  informalEmploymentRate  Float?
  medianWage              Float?
  wageGrowthRate          Float?
  wageBySector            String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  country                 Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model FiscalSystem {
  id                       String   @id @default(cuid())
  countryId                String   @unique
  personalIncomeTaxRates   String?
  corporateTaxRates        String?
  salesTaxRate             Float?
  propertyTaxRate          Float?
  payrollTaxRate           Float?
  exciseTaxRates           String?
  wealthTaxRate            Float?
  spendingByCategory       String?
  fiscalBalanceGDPPercent  Float?
  primaryBalanceGDPPercent Float?
  taxEfficiency            Float?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  country                  Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model IncomeDistribution {
  id                        String   @id @default(cuid())
  countryId                 String   @unique
  economicClasses           String?
  top10PercentWealth        Float?
  bottom50PercentWealth     Float?
  middleClassPercent        Float?
  intergenerationalMobility Float?
  educationMobility         Float?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  country                   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model GovernmentBudget {
  id                    String   @id @default(cuid())
  countryId             String   @unique
  spendingCategories    String?
  spendingEfficiency    Float?
  publicInvestmentRate  Float?
  socialSpendingPercent Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  country               Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model Demographics {
  id                         String   @id @default(cuid())
  countryId                  String   @unique
  ageDistribution            String?
  regions                    String?
  educationLevels            String?
  citizenshipStatuses        String?
  birthRate                  Float?
  deathRate                  Float?
  migrationRate              Float?
  dependencyRatio            Float?
  medianAge                  Float?
  populationGrowthProjection Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  country                    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model HistoricalDataPoint {
  id                   String   @id @default(cuid())
  countryId            String
  ixTimeTimestamp      DateTime
  population           Float
  gdpPerCapita         Float
  totalGdp             Float
  populationGrowthRate Float
  gdpGrowthRate        Float
  landArea             Float?
  populationDensity    Float?
  gdpDensity           Float?
  createdAt            DateTime @default(now())
  country              Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([ixTimeTimestamp])
}

model DmInputs {
  id              String   @id @default(cuid())
  countryId       String?
  ixTimeTimestamp DateTime
  inputType       String
  value           Float
  description     String?
  duration        Int?
  isActive        Boolean  @default(true)
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  country         Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([ixTimeTimestamp])
  @@index([isActive])
  @@index([inputType])
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model CalculationLog {
  id                 String   @id @default(cuid())
  timestamp          DateTime @default(now())
  ixTimeTimestamp    DateTime
  countriesUpdated   Int
  executionTimeMs    Int
  globalGrowthFactor Float
  notes              String?
  createdAt          DateTime @default(now())

  @@index([timestamp])
  @@index([ixTimeTimestamp])
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  countryId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     Country? @relation(fields: [countryId], references: [id])

  @@index([clerkUserId])
  @@index([countryId])
}

model EconomicModel {
  id                   String           @id @default(cuid())
  countryId            String           @unique
  baseYear             Int
  projectionYears      Int
  gdpGrowthRate        Float
  inflationRate        Float
  unemploymentRate     Float
  interestRate         Float
  exchangeRate         Float
  populationGrowthRate Float
  investmentRate       Float
  fiscalBalance        Float
  tradeBalance         Float
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  country              Country          @relation(fields: [countryId], references: [id], onDelete: Cascade)
  policyEffects        PolicyEffect[]
  sectoralOutputs      SectoralOutput[]
}

model SectoralOutput {
  id              String        @id @default(cuid())
  economicModelId String
  year            Int
  agriculture     Float
  industry        Float
  services        Float
  government      Float
  totalGDP        Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  economicModel   EconomicModel @relation(fields: [economicModelId], references: [id], onDelete: Cascade)
}

model PolicyEffect {
  id                         String        @id @default(cuid())
  economicModelId            String
  name                       String
  description                String
  gdpEffectPercentage        Float
  inflationEffectPercentage  Float
  employmentEffectPercentage Float
  yearImplemented            Int
  durationYears              Int
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  economicModel              EconomicModel @relation(fields: [economicModelId], references: [id], onDelete: Cascade)
}

model IntelligenceItem {
  id                String   @id @default(cuid())
  title             String
  content           String
  category          String
  priority          String
  source            String
  timestamp         DateTime
  region            String?
  affectedCountries String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CrisisEvent {
  id                String   @id @default(cuid())
  type              String
  title             String
  severity          String
  affectedCountries String?
  casualties        Int?
  economicImpact    Float?
  responseStatus    String?
  timestamp         DateTime
  description       String?
  location          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model DiplomaticRelation {
  id                 String   @id @default(cuid())
  country1           String
  country2           String
  relationship       String
  strength           Int
  treaties           String?
  lastContact        DateTime
  status             String
  diplomaticChannels String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Treaty {
  id             String   @id @default(cuid())
  name           String
  parties        String?
  type           String
  status         String
  signedDate     DateTime
  expiryDate     DateTime
  description    String?
  complianceRate Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model EconomicIndicator {
  id                 String   @id @default(cuid())
  globalGDP          Float
  globalGrowth       Float
  inflationRate      Float
  unemploymentRate   Float
  tradeVolume        Float
  currencyVolatility Float
  timestamp          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
