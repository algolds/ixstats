// prisma/schema.prisma - Enhanced with comprehensive economic data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id   String @id @default(cuid())
  name String @unique

  // Geographic and political data
  continent      String?
  region         String?
  governmentType String?
  religion       String?
  leader         String?
  areaSqMi       Float?
  landArea       Float?

  // Core baseline data (from roster)
  baselinePopulation    Float
  baselineGdpPerCapita  Float
  maxGdpGrowthRate      Float
  adjustedGdpGrowth     Float
  populationGrowthRate  Float
  localGrowthFactor     Float   @default(1.0)

  // Current calculated values
  currentPopulation    Float
  currentGdpPerCapita  Float
  currentTotalGdp      Float
  populationDensity    Float?
  gdpDensity          Float?
  
  // Timestamps and tracking
  lastCalculated Date
  baselineDate   Date
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Tiers
  economicTier    String
  populationTier  String

  // Projections
  projected2040Population    Float?
  projected2040Gdp          Float?
  projected2040GdpPerCapita Float?

  // === NEW: Core Economic Indicators ===
  nominalGDP              Float?
  realGDPGrowthRate      Float?
  inflationRate          Float?
  currencyExchangeRate   Float?

  // === NEW: Labor & Employment ===
  laborForceParticipationRate Float?
  employmentRate             Float?
  unemploymentRate           Float?
  totalWorkforce             Float?
  averageWorkweekHours       Float?
  minimumWage                Float?
  averageAnnualIncome        Float?

  // === NEW: Basic Fiscal Data ===
  taxRevenueGDPPercent     Float?
  governmentRevenueTotal   Float?
  taxRevenuePerCapita      Float?
  governmentBudgetGDPPercent Float?
  budgetDeficitSurplus     Float?
  internalDebtGDPPercent   Float?
  externalDebtGDPPercent   Float?
  totalDebtGDPRatio        Float?
  debtPerCapita            Float?
  interestRates            Float?
  debtServiceCosts         Float?

  // === NEW: Income & Wealth ===
  povertyRate              Float?
  incomeInequalityGini     Float?
  socialMobilityIndex      Float?

  // === NEW: Government Spending ===
  totalGovernmentSpending  Float?
  spendingGDPPercent      Float?
  spendingPerCapita       Float?

  // === NEW: Demographics ===
  lifeExpectancy           Float?
  urbanPopulationPercent   Float?
  ruralPopulationPercent   Float?
  literacyRate            Float?

  // Relations
  dmInputs                DmInput[]
  historicalDataPoints    HistoricalDataPoint[]
  
  // === NEW: Detailed Economic Relations ===
  economicProfile         EconomicProfile?
  laborMarket            LaborMarket?
  fiscalSystem           FiscalSystem?
  incomeDistribution     IncomeDistribution?
  governmentBudget       GovernmentBudget?
  demographics           Demographics?

  @@map("countries")
}

// === NEW: Detailed Economic Models ===

model EconomicProfile {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Advanced economic indicators
  gdpGrowthVolatility    Float?
  economicComplexity     Float?
  innovationIndex        Float?
  competitivenessRank    Int?
  easeOfDoingBusiness    Int?
  corruptionIndex        Float?
  
  // Trade data
  exportsGDPPercent      Float?
  importsGDPPercent      Float?
  tradeBalance          Float?
  
  // Complex data as JSON
  sectorBreakdown       String? // JSON: { "agriculture": 10, "industry": 30, "services": 60 }
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("economic_profiles")
}

model LaborMarket {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Advanced labor metrics
  youthUnemploymentRate     Float?
  femaleParticipationRate   Float?
  informalEmploymentRate    Float?
  medianWage               Float?
  wageGrowthRate           Float?
  
  // Complex data as JSON
  employmentBySector       String? // JSON: { "agriculture": 20, "industry": 30, "services": 50 }
  wageBySector            String? // JSON: { "agriculture": 25000, "industry": 45000, "services": 55000 }
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("labor_markets")
}

model FiscalSystem {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Tax rates (simple)
  salesTaxRate         Float?
  propertyTaxRate      Float?
  payrollTaxRate       Float?
  wealthTaxRate        Float?
  
  // Budget and fiscal health
  fiscalBalanceGDPPercent    Float?
  primaryBalanceGDPPercent   Float?
  taxEfficiency             Float?
  
  // Complex tax structures as JSON
  personalIncomeTaxRates    String? // JSON: [{ "bracket": 0, "rate": 0 }, { "bracket": 20000, "rate": 10 }]
  corporateTaxRates         String? // JSON: [{ "size": "Small", "rate": 15 }, { "size": "Large", "rate": 25 }]
  exciseTaxRates           String? // JSON: [{ "type": "Fuel", "rate": 25 }, { "type": "Tobacco", "rate": 50 }]
  spendingByCategory       String? // JSON: [{ "category": "Defense", "percent": 15, "amount": 1000000 }]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fiscal_systems")
}

model IncomeDistribution {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Wealth distribution metrics
  top10PercentWealth          Float?
  bottom50PercentWealth       Float?
  middleClassPercent          Float?
  intergenerationalMobility   Float?
  educationMobility          Float?
  
  // Complex data as JSON
  economicClasses            String? // JSON: [{ "name": "Upper Class", "populationPercent": 5, "wealthPercent": 40 }]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("income_distributions")
}

model GovernmentBudget {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Budget efficiency and allocation
  spendingEfficiency       Float?
  publicInvestmentRate     Float?
  socialSpendingPercent    Float?
  
  // Complex spending data as JSON
  spendingCategories       String? // JSON: [{ "category": "Defense", "amount": 1000000, "percent": 15 }]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("government_budgets")
}

model Demographics {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Demographic indicators
  birthRate                    Float?
  deathRate                    Float?
  migrationRate                Float?
  dependencyRatio              Float?
  medianAge                    Float?
  populationGrowthProjection   Float?
  
  // Complex demographic data as JSON
  ageDistribution             String? // JSON: [{ "group": "0-15", "percent": 20, "color": "#4299E1" }]
  regions                     String? // JSON: [{ "name": "North", "population": 1000000, "urbanPercent": 70 }]
  educationLevels             String? // JSON: [{ "level": "Primary", "percent": 15, "color": "#ECC94B" }]
  citizenshipStatuses         String? // JSON: [{ "status": "Citizens", "percent": 92, "color": "#4C51BF" }]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demographics")
}

// Existing models (unchanged)
model DmInput {
  id              String   @id @default(cuid())
  countryId       String?
  country         Country? @relation(fields: [countryId], references: [id])
  ixTimeTimestamp DateTime
  inputType       String
  value           Float
  description     String?
  duration        Float?
  isActive        Boolean  @default(true)
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("dm_inputs")
}

model HistoricalDataPoint {
  id                   String   @id @default(cuid())
  countryId            String
  country              Country  @relation(fields: [countryId], references: [id])
  ixTimeTimestamp      DateTime
  population           Float
  gdpPerCapita         Float
  totalGdp            Float
  populationGrowthRate Float
  gdpGrowthRate       Float
  landArea            Float?
  populationDensity   Float?
  gdpDensity         Float?
  createdAt           DateTime @default(now())

  @@unique([countryId, ixTimeTimestamp])
  @@map("historical_data_points")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

model CalculationLog {
  id                  String   @id @default(cuid())
  timestamp           DateTime
  ixTimeTimestamp     DateTime
  countriesUpdated    Int
  executionTimeMs     Int
  globalGrowthFactor  Float
  notes              String?

  @@map("calculation_logs")
}