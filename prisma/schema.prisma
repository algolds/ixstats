// prisma/schema.prisma
// Enhanced schema with comprehensive economic data support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Country {
  id   String @id @default(cuid())
  name String @unique

  // Geographic and Political Information
  continent      String?
  region         String?
  governmentType String?
  religion       String?
  leader         String?

  // Area Information
  landArea  Float? // Area in kmÂ²
  areaSqMi  Float? // Area in square miles

  // Baseline Economic Data (from roster - 2028 baseline)
  baselinePopulation     Float
  baselineGdpPerCapita   Float
  maxGdpGrowthRate       Float
  adjustedGdpGrowth      Float
  populationGrowthRate   Float

  // Current Calculated Values (updated by system)
  currentPopulation    Float
  currentGdpPerCapita  Float
  currentTotalGdp      Float
  populationDensity    Float?
  gdpDensity           Float?

  // Classification
  economicTier     String
  populationTier   String

  // Projection fields
  projected2040Population   Float @default(0)
  projected2040Gdp          Float @default(0)
  projected2040GdpPerCapita Float @default(0)
  actualGdpGrowth           Float @default(0)

  // === NEW ECONOMIC DATA FIELDS ===

  // Core Economic Indicators
  nominalGDP              Float?
  realGDPGrowthRate      Float?
  inflationRate          Float?
  currencyExchangeRate   Float?

  // Labor & Employment
  laborForceParticipationRate Float?
  employmentRate             Float?
  unemploymentRate           Float?
  totalWorkforce            Float?
  averageWorkweekHours      Float?
  minimumWage               Float?
  averageAnnualIncome       Float?

  // Fiscal System - Basic
  taxRevenueGDPPercent      Float?
  governmentRevenueTotal    Float?
  taxRevenuePerCapita      Float?
  governmentBudgetGDPPercent Float?
  budgetDeficitSurplus     Float?
  internalDebtGDPPercent   Float?
  externalDebtGDPPercent   Float?
  totalDebtGDPRatio        Float?
  debtPerCapita            Float?
  interestRates            Float?
  debtServiceCosts         Float?

  // Income & Wealth
  povertyRate              Float?
  incomeInequalityGini     Float?
  socialMobilityIndex      Float?

  // Government Spending
  totalGovernmentSpending  Float?
  spendingGDPPercent      Float?
  spendingPerCapita       Float?

  // Demographics - Basic
  lifeExpectancy          Float?
  urbanPopulationPercent  Float?
  ruralPopulationPercent  Float?
  literacyRate           Float?

  // System Fields
  localGrowthFactor Float   @default(1.0)
  lastCalculated    DateTime @default(now())
  baselineDate      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  historicalData    HistoricalDataPoint[]
  dmInputs          DmInputs[]
  economicProfile   EconomicProfile?
  laborMarket       LaborMarket?
  fiscalSystem      FiscalSystem?
  incomeDistribution IncomeDistribution?
  governmentBudget  GovernmentBudget?
  demographics      Demographics?
  users             User[]

  @@index([name])
  @@index([economicTier])
  @@index([populationTier])
  @@index([continent])
  @@index([region])
}

// Detailed Economic Profile
model EconomicProfile {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Additional economic indicators
  gdpGrowthVolatility    Float?
  economicComplexity     Float?
  innovationIndex        Float?
  competitivenessRank    Int?
  easeOfDoingBusiness    Int?
  corruptionIndex        Float?
  
  // Sector breakdown (JSON)
  sectorBreakdown        String? // JSON: {agriculture: %, industry: %, services: %}
  
  // Trade data
  exportsGDPPercent      Float?
  importsGDPPercent      Float?
  tradeBalance           Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Labor Market Details
model LaborMarket {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Employment sectors (JSON)
  employmentBySector     String? // JSON: {agriculture: %, industry: %, services: %}
  
  // Detailed employment data
  youthUnemploymentRate  Float?
  femaleParticipationRate Float?
  informalEmploymentRate Float?
  
  // Wage data
  medianWage            Float?
  wageGrowthRate        Float?
  wageBySector          String? // JSON: {agriculture: wage, industry: wage, services: wage}
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Fiscal System Details
model FiscalSystem {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Tax rates (JSON)
  personalIncomeTaxRates String? // JSON: [{bracket: number, rate: number}]
  corporateTaxRates      String? // JSON: [{size: string, rate: number}]
  salesTaxRate          Float?
  propertyTaxRate       Float?
  payrollTaxRate        Float?
  exciseTaxRates        String? // JSON: [{type: string, rate: number}]
  wealthTaxRate         Float?
  
  // Budget breakdown (JSON)
  spendingByCategory    String? // JSON: [{category: string, amount: number, percent: number}]
  
  // Additional fiscal data
  fiscalBalanceGDPPercent Float?
  primaryBalanceGDPPercent Float?
  taxEfficiency         Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Income Distribution Details
model IncomeDistribution {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Economic classes (JSON)
  economicClasses       String? // JSON: [{name: string, populationPercent: number, wealthPercent: number, averageIncome: number, color: string}]
  
  // Distribution metrics
  top10PercentWealth    Float?
  bottom50PercentWealth Float?
  middleClassPercent    Float?
  
  // Social mobility
  intergenerationalMobility Float?
  educationMobility     Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Government Budget Details
model GovernmentBudget {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Spending categories (JSON)
  spendingCategories    String? // JSON: [{category: string, amount: number, percent: number, icon: string, color: string, description: string}]
  
  // Budget efficiency metrics
  spendingEfficiency    Float?
  publicInvestmentRate  Float?
  socialSpendingPercent Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Demographics Details
model Demographics {
  id        String @id @default(cuid())
  countryId String @unique
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  // Age distribution (JSON)
  ageDistribution       String? // JSON: [{group: string, percent: number, color: string}]
  
  // Regional data (JSON)
  regions              String? // JSON: [{name: string, population: number, urbanPercent: number, color: string}]
  
  // Education levels (JSON)
  educationLevels      String? // JSON: [{level: string, percent: number, color: string}]
  
  // Citizenship status (JSON)
  citizenshipStatuses  String? // JSON: [{status: string, percent: number, color: string}]
  
  // Additional demographic data
  birthRate           Float?
  deathRate           Float?
  migrationRate       Float?
  dependencyRatio     Float?
  medianAge           Float?
  populationGrowthProjection Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HistoricalDataPoint {
  id              String   @id @default(cuid())
  countryId       String
  ixTimeTimestamp DateTime
  population      Float
  gdpPerCapita    Float
  totalGdp        Float
  populationGrowthRate Float
  gdpGrowthRate   Float
  landArea        Float?
  populationDensity Float?
  gdpDensity      Float?
  createdAt       DateTime @default(now())

  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([ixTimeTimestamp])
}

model DmInputs {
  id              String   @id @default(cuid())
  countryId       String?
  ixTimeTimestamp DateTime
  inputType       String
  value           Float
  description     String?
  duration        Int?     // Duration in days
  isActive        Boolean  @default(true)
  createdBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  country Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([ixTimeTimestamp])
  @@index([isActive])
  @@index([inputType])
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

model CalculationLog {
  id                String   @id @default(cuid())
  timestamp         DateTime @default(now())
  ixTimeTimestamp   DateTime
  countriesUpdated  Int
  executionTimeMs   Int
  globalGrowthFactor Float
  notes             String?
  createdAt         DateTime @default(now())

  @@index([timestamp])
  @@index([ixTimeTimestamp])
}

model User {
  id           String   @id @default(cuid())
  clerkUserId  String   @unique // Clerk user ID
  countryId    String?  // Foreign key to Country
  country      Country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([clerkUserId])
  @@index([countryId])
}